exports[`execute a series of promises when the count of the promises
      is the same as the concurrency 1`] = `
Array [
  Object {
    "result": 1,
    "state": "rejected",
  },
  Object {
    "result": 2,
    "state": "rejected",
  },
  Object {
    "result": 3,
    "state": "rejected",
  },
]
`;

exports[`seriesSettled allows an array of promises to execute in a
      sequence. It can control the concurrency and return an array
      of results whether it resolves or rejects 1`] = `
Array [
  Object {
    "result": 1,
    "state": "resolved",
  },
  Object {
    "result": "test",
    "state": "resolved",
  },
  Object {
    "result": 2,
    "state": "resolved",
  },
]
`;

exports[`seriesSettled default settings will resolve
      three promises one at a time 1`] = `
Array [
  Object {
    "result": 1,
    "state": "resolved",
  },
  Object {
    "result": "test",
    "state": "resolved",
  },
  Object {
    "result": 2,
    "state": "resolved",
  },
]
`;

exports[`seriesSettled default settings will resolve three promises one at a time 1`] = `
Array [
  Object {
    "result": 1,
    "state": "resolved",
  },
  Object {
    "result": "test",
    "state": "resolved",
  },
  Object {
    "result": 2,
    "state": "resolved",
  },
]
`;

exports[`should execute a series of promises when the concurrency is
      larger than the count of the promises 1`] = `
Array [
  Object {
    "result": 1,
    "state": "resolved",
  },
  Object {
    "result": 2,
    "state": "resolved",
  },
  Object {
    "result": 3,
    "state": "resolved",
  },
]
`;

exports[`should execute execute a series with a concurrency limit of 2.
      The step function will output context on each concurrent step.
      Any promise that rejects will not reject the entire series. 1`] = `
Array [
  Object {
    "current": 1,
    "total": 3,
    "value": Array [
      Object {
        "result": 1,
        "state": "resolved",
      },
      Object {
        "result": 2,
        "state": "resolved",
      },
    ],
  },
  Object {
    "current": 2,
    "total": 3,
    "value": Array [
      Object {
        "result": 1,
        "state": "resolved",
      },
      Object {
        "result": 2,
        "state": "resolved",
      },
      Object {
        "result": 3,
        "state": "resolved",
      },
      Object {
        "result": 4,
        "state": "rejected",
      },
    ],
  },
  Object {
    "current": 3,
    "total": 3,
    "value": Array [
      Object {
        "result": 1,
        "state": "resolved",
      },
      Object {
        "result": 2,
        "state": "resolved",
      },
      Object {
        "result": 3,
        "state": "resolved",
      },
      Object {
        "result": 4,
        "state": "rejected",
      },
      Object {
        "result": 5,
        "state": "resolved",
      },
      Object {
        "result": 6,
        "state": "resolved",
      },
    ],
  },
]
`;

exports[`should execute execute a series with a concurrency limit of 2.
      The step function will output context on each concurrent step.
      Any promise that rejects will not reject the entire series. 2`] = `
Array [
  Object {
    "result": 1,
    "state": "resolved",
  },
  Object {
    "result": 2,
    "state": "resolved",
  },
  Object {
    "result": 3,
    "state": "resolved",
  },
  Object {
    "result": 4,
    "state": "rejected",
  },
  Object {
    "result": 5,
    "state": "resolved",
  },
  Object {
    "result": 6,
    "state": "resolved",
  },
]
`;

exports[`should execute promises in series, any promise that rejects
      will not reject the entire series. 1`] = `
Array [
  Object {
    "result": 1,
    "state": "rejected",
  },
  Object {
    "result": 2,
    "state": "rejected",
  },
  Object {
    "result": 3,
    "state": "resolved",
  },
  Object {
    "result": 4,
    "state": "rejected",
  },
  Object {
    "result": 5,
    "state": "rejected",
  },
]
`;

exports[`should execute promises in series, any promise that rejects 
      will not reject the entire series. 1`] = `
Array [
  Object {
    "result": 1,
    "state": "rejected",
  },
  Object {
    "result": 2,
    "state": "rejected",
  },
  Object {
    "result": 3,
    "state": "resolved",
  },
  Object {
    "result": 4,
    "state": "rejected",
  },
  Object {
    "result": 5,
    "state": "rejected",
  },
]
`;

exports[`should execute promises, functions or values together
      whether they reject or resolve 1`] = `
Array [
  Object {
    "result": "first value",
    "state": "resolved",
  },
  Object {
    "result": "second value",
    "state": "rejected",
  },
  Object {
    "result": 3,
    "state": "resolved",
  },
  Object {
    "result": 4,
    "state": "resolved",
  },
  Object {
    "result": 5,
    "state": "rejected",
  },
  Object {
    "result": 6,
    "state": "resolved",
  },
  Object {
    "result": 7,
    "state": "rejected",
  },
]
`;

exports[`should execute promises, functions or values together whether they reject or resolve 1`] = `
Array [
  Object {
    "result": "first value",
    "state": "resolved",
  },
  Object {
    "result": "second value",
    "state": "rejected",
  },
  Object {
    "result": 3,
    "state": "resolved",
  },
  Object {
    "result": 4,
    "state": "resolved",
  },
  Object {
    "result": 5,
    "state": "rejected",
  },
  Object {
    "result": 6,
    "state": "resolved",
  },
  Object {
    "result": 7,
    "state": "rejected",
  },
]
`;

exports[`should execute synchronous functions and catch the settled
      results, not throwing errors 1`] = `
Array [
  Object {
    "result": "bs",
    "state": "rejected",
  },
  Object {
    "result": "reason",
    "state": "resolved",
  },
  Object {
    "result": "bs",
    "state": "rejected",
  },
]
`;

exports[`should execute synchronous functions and catch the settled results, not throwing errors 1`] = `
Array [
  Object {
    "result": "bs",
    "state": "rejected",
  },
  Object {
    "result": "reason",
    "state": "resolved",
  },
  Object {
    "result": "bs",
    "state": "rejected",
  },
]
`;

exports[`should should execute promises with no concurrency limit,
      any promise that rejects will not reject the entire series. 1`] = `
Array [
  Object {
    "current": 1,
    "total": 2,
    "value": Array [
      Object {
        "result": 1,
        "state": "resolved",
      },
      Object {
        "result": 2,
        "state": "resolved",
      },
      Object {
        "result": 3,
        "state": "rejected",
      },
    ],
  },
  Object {
    "current": 2,
    "total": 2,
    "value": Array [
      Object {
        "result": 1,
        "state": "resolved",
      },
      Object {
        "result": 2,
        "state": "resolved",
      },
      Object {
        "result": 3,
        "state": "rejected",
      },
      Object {
        "result": 4,
        "state": "resolved",
      },
      Object {
        "result": 5,
        "state": "rejected",
      },
    ],
  },
]
`;

exports[`should should execute promises with no concurrency limit,
      any promise that rejects will not reject the entire series. 2`] = `
Array [
  Object {
    "result": 1,
    "state": "resolved",
  },
  Object {
    "result": 2,
    "state": "resolved",
  },
  Object {
    "result": 3,
    "state": "rejected",
  },
  Object {
    "result": 4,
    "state": "resolved",
  },
  Object {
    "result": 5,
    "state": "rejected",
  },
]
`;
